$blue: #008aff;
$red: #e53935;
$green: #00ca85;
$orange: #f7991c;
$gray: #f2f2f2;
$button-gray: #767676;
$purple: #664a86;
$purple-link: #c7c0de;
$purple-black: #403666;
$cream: #f5f4f0;



@mixin grayscale($val: 100%) {
  -webkit-filter: grayscale($val);
  filter: grayscale($val);
  filter: gray;
  filter: url("data:image/svg+xml;utf8,<svg version='1.1' xmlns='http://www.w3.org/2000/svg' height='0'><filter id='greyscale'><feColorMatrix type='matrix' values='0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0' /></filter></svg>#greyscale");
}

@mixin user-select($val) {
  -webkit-touch-callout: $val;
  -webkit-user-select: $val;
  -khtml-user-select: $val;
  -moz-user-select: $val;
  -ms-user-select: $val;
  user-select: $val;
}

@mixin background-clip($val: padding-box) {
  -webkit-background-clip: $val;
  -moz-background-clip: $val;
}

@mixin transition($transition-property, $transition-time, $method) {
    -webkit-transition: $transition-property $transition-time $method;
    -moz-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  } }

@mixin screen($resMin, $resMax) { @media screen and (min-width: $resMin) and (max-width: $resMax) { @content; } }
@mixin max-screen($res) { @media screen and (max-width: $res) { @content; } }
@mixin min-screen($res) { @media screen and (min-width: $res) { @content; } }

/*  Gradients  */
@mixin linear-gradient($fromColor, $toColor) {
  background-color: $toColor; /* Fallback Color */
  background-image: -webkit-gradient(linear, left top, left bottom, from($fromColor), to($toColor)); /* Saf4+, Chrome */
  background-image: -webkit-linear-gradient(top, $fromColor, $toColor); /* Chrome 10+, Saf5.1+, iOS 5+ */
  background-image: -moz-linear-gradient(top, $fromColor, $toColor); /* FF3.6 */
  background-image: -ms-linear-gradient(top, $fromColor, $toColor); /* IE10 */
  background-image: -o-linear-gradient(top, $fromColor, $toColor); /* Opera 11.10+ */
  background-image: linear-gradient(top, $fromColor, $toColor);
}
@mixin gradient-ver-three-colors($startColor: #00b3ee, $midColor: #7a43b6, $colorStop: 50%, $endColor: #c3325f) {
  background-color: mix($midColor, $endColor, 80%);
  background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), color-stop($colorStop, $midColor), to($endColor));
  background-image: -webkit-linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-image: -moz-linear-gradient(top, $startColor, $midColor $colorStop, $endColor);
  background-image: -o-linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-image: linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-repeat: no-repeat;
}
@mixin gradient-radial($innerColor: #555, $outerColor: #333)  {
  background-color: $outerColor;
  background-image: -webkit-gradient(radial, center center, 0, center center, 460, from($innerColor), to($outerColor));
  background-image: -webkit-radial-gradient(circle, $innerColor, $outerColor);
  background-image: -moz-radial-gradient(circle, $innerColor, $outerColor);
  background-image: -o-radial-gradient(circle, $innerColor, $outerColor);
  background-repeat: no-repeat;
}

/*  Box Sizing  */
@mixin box-sizing($string){
  -webkit-box-sizing: $string;
  -moz-box-sizing: $string;
  box-sizing: $string;
}


/*  Border Radius  */
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius:    $radius;
  border-radius:         $radius;

/*  -moz-background-clip:    padding;
  -webkit-background-clip: padding-box;
  background-clip:         padding-box;*/
}

/* Border Radius for individual corners */
@mixin border-radiuses ($topleft, $topright, $bottomleft, $bottomright) {
  -webkit-border-top-right-radius:    $topright;
  -webkit-border-bottom-right-radius: $bottomright;
  -webkit-border-bottom-left-radius:  $bottomleft;
  -webkit-border-top-left-radius:     $topleft;

  -moz-border-radius-topright:        $topright;
  -moz-border-radius-bottomright:     $bottomright;
  -moz-border-radius-bottomleft:      $bottomleft;
  -moz-border-radius-topleft:         $topleft;

  border-top-right-radius:            $topright;
  border-bottom-right-radius:         $bottomright;
  border-bottom-left-radius:          $bottomleft;
  border-top-left-radius:             $topleft;

  -moz-background-clip:    padding;
  -webkit-background-clip: padding-box;
  background-clip:         padding-box;
}


@mixin transform($args){
  -webkit-transform: $args;
  -moz-transform: $args;
  -o-transform: $args;
  -ms-transform: $args;
  transform: $args;
}




/* Detailed Linear Gradient */
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
  }

  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/* Test if `$value` is an angle        */
/* @param {*} $value - Value to test   */
/* @return {Bool}                      */
@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-direction or $is-angle;
}

/* Convert a direction to legacy syntax                 */
/* @param {Keyword | Angle} $value - Value to convert   */
/* @require {function} is-direction                     */
/* @require {function} convert-angle                    */
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - convert-angle($value, 'deg');
}

/* Mixin printing a detailed linear-gradient                                        */
/* as well as a plain color fallback                                                */
/* and the `-webkit-` prefixed declaration                                          */
/* @access public                                                                   */
/* @param {String | List | Angle} $direction - Linear gradient direction            */
/* @param {Arglist} $color-stops - List of color-stops composing the gradient       */
@mixin detailed-linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 2), 1);
  background-image: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background-image: linear-gradient($direction, $color-stops);
}

@mixin vendor ($property, $value...) {
    -webkit-#{$property}:$value;
    -moz-#{$property}:$value;
    -ms-#{$property}:$value;
    -o-#{$property}:$value;
    #{$property}:$value;
}

@mixin position ($position: relative, $coordinates: 0 0 0 0) {
    @if type-of($position) == list {
        $coordinates:$position;
        $position:relative;
    }

    $top:nth($coordinates, 1);
    $right:nth($coordinates, 2);
    $bottom:nth($coordinates, 3);
    $left:nth($coordinates, 4);

    position: $position;

    @if $top == auto {
        top:$top;
    }
    @else if not(unitless($top)) {
        top:$top;
    }
    @if $right == auto {
        right:$right;
    }
    @else if not(unitless($right)) {
        right:$right;
    }
    @if $bottom == auto {
        bottom:$bottom;
    }
    @else if not(unitless($bottom)) {
        bottom:$bottom;
    }
    @if $left == auto {
        left:$left;
    }
    @else if not(unitless($left)) {
        left:$left;
    }
}